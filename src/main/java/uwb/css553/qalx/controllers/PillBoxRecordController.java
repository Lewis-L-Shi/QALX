package uwb.css553.qalx.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import uwb.css553.qalx.models.PillBoxRecord;
import uwb.css553.qalx.repositories.PillBoxRecordRepository;

import java.security.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/pillBoxRecord") // This means URL's start with /demo (after Application path)
public class PillBoxRecordController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private PillBoxRecordRepository pillBoxRepository;

    @RequestMapping(method=RequestMethod.POST) // Map ONLY GET Requests
    public @ResponseBody String addNewUser (
            @RequestParam Integer pid,
            @RequestParam("date") @DateTimeFormat(pattern = "EEE MMM dd HH:mm:ss z yyyy") Date date,
            //@RequestParam("date") @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm:ss") LocalDateTime date,
            //@RequestParam Integer pillMissed,
            @RequestParam Integer psid,
            @RequestParam Integer status

    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        PillBoxRecord n = new PillBoxRecord();
        n.setPid(pid);
        n.setDate(date);
        //n.setPillMissed(pillMissed);
        n.setPsid(psid);
        n.setStatus(status);
        pillBoxRepository.save(n);
        return "Saved";
    }

    @RequestMapping(method=RequestMethod.GET)
    public @ResponseBody Iterable<PillBoxRecord> findAll() {
        // This returns a JSON or XML with the users
        return pillBoxRepository.findAll();
    }
    @RequestMapping(method=RequestMethod.GET, params="pid")
    public @ResponseBody List<PillBoxRecord> findByPidContainsAllIgnoreCase(Integer pid) {
        // This returns a JSON or XML with the users
        return pillBoxRepository.findByPidContainsAllIgnoreCase(pid);
    }
    @RequestMapping(method=RequestMethod.GET, params="psid")
    public @ResponseBody List<PillBoxRecord> findByPsidContainsAllIgnoreCase(Integer psid) {
        // This returns a JSON or XML with the users
        return pillBoxRepository.findByPsidContainsAllIgnoreCase(psid);
    }

    @RequestMapping(method=RequestMethod.GET, params={"startDate", "endDate"})
    public @ResponseBody List<PillBoxRecord> findByDateBetween(
            @RequestParam(value="startDate") @DateTimeFormat(pattern = "EEE MMM dd HH:mm:ss z yyyy") Date startDate,
            @RequestParam(value="endDate") @DateTimeFormat(pattern = "EEE MMM dd HH:mm:ss z yyyy") Date endDate) {
        return pillBoxRepository.findByDateBetween(startDate, endDate);
    }

    @RequestMapping(method=RequestMethod.GET, params={"pid", "startDate", "endDate"})
    public @ResponseBody List<PillBoxRecord> findByPidAndDateBetween(
            @RequestParam(value="pid") Integer pid,
            @RequestParam(value="startDate") @DateTimeFormat(pattern = "EEE MMM dd HH:mm:ss z yyyy") Date startDate,
            @RequestParam(value="endDate") @DateTimeFormat(pattern = "EEE MMM dd HH:mm:ss z yyyy") Date endDate) {
        return pillBoxRepository.findByDateBetween(startDate, endDate);
    }
}